name: Build
on:
  workflow_dispatch:
  push:
    branches: [master, workflow-test]
    tags: ["v*"]
  pull_request:
    branches: [master]
env:
  ARTIFACT_NAME: transanno
permissions:
  contents: write
  pull-requests: read
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.config.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - runs-on: macos-latest
            target: aarch64-apple-darwin
            test: true
            cross: false
          - runs-on: macos-latest
            target: x86_64-apple-darwin
            test: true
            cross: false
          - runs-on: ubuntu-latest
            target: x86_64-unknown-linux-musl
            test: true
            cross: true
          - runs-on: ubuntu-latest
            target: aarch64-unknown-linux-musl
            test: true
            cross: true
          - runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            test: true
            cross: false
          - runs-on: windows-latest
            target: aarch64-pc-windows-msvc
            test: false
            cross: false
    env:
      CARGO_CMD: ${{ matrix.config.cross && 'cross' || 'cargo' }}
      ARTIFACT_SUFFIX: ${{ contains(matrix.config.target, 'windows') && '.exe' || '' }}
      TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
    steps:
      - name: Git config
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf input
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.config.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Prepare files for UNIX
        if: runner.os != 'Windows'
        run: ./prepare-test-files.sh
      - name: Prepare files for Windows
        if: runner.os == 'Windows'
        run:
          "7z e liftover-rs\\testfiles\\genomes\\GRCh37\\GRCh37.chr22.genome.fa.xz -oliftover-rs\\testfiles\\genomes\\GRCh37 &&
          7z e liftover-rs\\testfiles\\genomes\\GRCh37\\GRCh37.chr22.revcomp.genome.fa.xz -oliftover-rs\\testfiles\\genomes\\GRCh37 &&
          7z e liftover-rs\\testfiles\\genomes\\GRCh38\\GRCh38.chr22.genome.fa.xz -oliftover-rs\\testfiles\\genomes\\GRCh38"
      - name: Install cross
        if: matrix.config.cross
        run: type cross > /dev/null || cargo install cross
      - name: Install toolchain
        run: rustup target install ${{ matrix.config.target }}
      - name: Build
        run: ${{ env.CARGO_CMD }} build --verbose --release --target ${{ matrix.config.target }}
      - name: Test
        if: matrix.config.test
        run: ${{ env.CARGO_CMD }} test --verbose --release --target ${{ matrix.config.target }}
      - name: Copy artifact
        run: |
          mkdir .artifact
          mkdir .artifact/${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}
          cp target/${{ matrix.config.target }}/release/${{ env.ARTIFACT_NAME }}${{ env.ARTIFACT_SUFFIX }} .artifact/${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}/
          cp README.md .artifact/${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}/
          cp LICENSE .artifact/${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}/
      - name: Zip artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          cd .artifact/
          zip -r ${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}.zip ${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}
      - name: Zip artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          cd .artifact/
          Compress-Archive -Path ${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }} -DestinationPath ${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}.zip
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}.zip
          path: .artifact/${{ env.ARTIFACT_NAME }}-${{ matrix.config.target }}-${{ env.TAG }}.zip
          if-no-files-found: error
  create-release:
    name: Create Release
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create release
        run: |
          set -xeu
          cat > generate-release-content-request.json <<EOF
          {
            "tag_name": "${{ github.ref_name }}"
          }
          EOF
          curl -L --fail \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer  ${{ github.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/generate-notes \
          -d @generate-release-content-request.json > release-content.json
          cat release-content.json
          cat > release-request.json <<EOF
          {
            "tag_name": "${{ github.ref_name }}",
            "name": "$(jq -r '.name' release-content.json)",
            "body": "$(jq -r '.body' release-content.json)",
            "draft": true,
            "prerelease": false
          }
          EOF
          curl --fail -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
          -d @release-request.json > release.json
          mkdir -p .artifact
      - uses: actions/download-artifact@v4
        with:
          path: .artifact
      - name: Upload artifact
        run: |
          set -xeu
          cd .artifact
          ls -laR
          for one in *.zip; do
          curl -L --fail \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/$(jq -r '.id' ../release.json)/assets?name=${one}" \
            --data-binary "@${one}/${one}"
          done
      - name: Publish release
        run: |
          set -xeu
          curl --fail -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/$(jq -r '.id' release.json) \
            -d '{"draft": false}'
