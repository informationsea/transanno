name: Build

on:
  push:
    branches: [master, action-test]
    tags: ["v*"]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: transanno

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Short tag
        id: short_tag
        if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
        run: echo "tag=$(basename ${{ github.ref }})" >> $GITHUB_OUTPUT
      - name: Hash
        id: hash
        if: ${{ startsWith(github.ref, 'refs/heads/')  }}
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.short_tag.outputs.tag }}${{ steps.hash.outputs.tag }}

  build:
    runs-on: ${{ matrix.config.os }}
    needs: tag
    strategy:
      matrix:
        config:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            test: true
            cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            test: true
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            test: false
            cross: false
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   test: true
          #   cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            test: true
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            test: false
            cross: true
    steps:
      - name: Git config
        if: ${{ matrix.config.os == 'windows-latest' }}
        run: git config --global core.autocrlf input
      - uses: actions/checkout@v3
      - name: Install musl tools
        if: ${{ matrix.config.target == 'x86_64-unknown-linux-musl' }}
        run: sudo apt-get install musl-tools musl-dev
      - name: Prepare files for UNIX
        if: ${{ matrix.config.os != 'windows-latest' }}
        run: ./prepare-test-files.sh
      - name: Prepare files for Windows
        if: ${{ matrix.config.os == 'windows-latest' }}
        run:
          "7z e liftover-rs\\testfiles\\genomes\\GRCh37\\GRCh37.chr22.genome.fa.xz -oliftover-rs\\testfiles\\genomes\\GRCh37 &&
          7z e liftover-rs\\testfiles\\genomes\\GRCh37\\GRCh37.chr22.revcomp.genome.fa.xz -oliftover-rs\\testfiles\\genomes\\GRCh37 &&
          7z e liftover-rs\\testfiles\\genomes\\GRCh38\\GRCh38.chr22.genome.fa.xz -oliftover-rs\\testfiles\\genomes\\GRCh38"
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.config.target }}
          override: true
          components: rustfmt, clippy
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: build
          args: --release --target ${{ matrix.config.target }}
      - name: Test
        if: ${{ matrix.config.test }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --target ${{ matrix.config.target }}
      - name: Create release zip for UNIX
        if: ${{ matrix.config.os != 'windows-latest' }}
        run: |
          mkdir -p ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}
          cp target/${{ matrix.config.target }}/release/${{ env.APP_NAME }} ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp README.md ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp LICENSE ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          zip -r ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}.zip ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
      - name: Create release zip for Windows
        if: ${{ matrix.config.os == 'windows-latest' }}
        run: |
          mkdir ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}
          cp target/${{ matrix.config.target }}/release/${{ env.APP_NAME }}.exe ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp README.md ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp LICENSE ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          Compress-Archive -DestinationPath ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}.zip -Path ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag}}.zip
          path: |
            ./${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}.zip

  release:
    needs: [build, tag]
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.tag.outputs.tag }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  upload:
    needs: [release, tag]
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          # - aarch64-apple-darwin
          - x86_64-unknown-linux-musl
          # - aarch64-unknown-linux-musl
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.target }}-${{ needs.tag.outputs.tag }}.zip
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ env.APP_NAME }}-${{ matrix.target }}-${{ needs.tag.outputs.tag }}.zip
          asset_name: ${{ env.APP_NAME }}-${{ matrix.target }}-${{ needs.tag.outputs.tag }}.zip
          asset_content_type: application/zip
